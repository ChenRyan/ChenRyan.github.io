(window.webpackJsonp=window.webpackJsonp||[]).push([[91],{396:function(a,t,s){"use strict";s.r(t);var e=s(15),n=Object(e.a)({},(function(){var a=this,t=a._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h1",{attrs:{id:"day01"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#day01"}},[a._v("#")]),a._v(" day01")]),a._v(" "),t("h2",{attrs:{id:"_1-项目开发准备"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-项目开发准备"}},[a._v("#")]),a._v(" 1. 项目开发准备")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[a._v("项目描述\n技术选型\nAPI接口\n你能从此项目中学到什么?\n")])])]),t("h2",{attrs:{id:"_2-开启项目开发"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-开启项目开发"}},[a._v("#")]),a._v(" 2. 开启项目开发")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[a._v("使用脚手架创建项目\n安装所有依赖/指定依赖\n开发环境运行\n生产环境打包与发布\n")])])]),t("h2",{attrs:{id:"_3-搭建项目整体界面结构"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-搭建项目整体界面结构"}},[a._v("#")]),a._v(" 3. 搭建项目整体界面结构")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[a._v("stylus的理解和使用\n    结构化, 变量, 函数/minxin(混合)\nvue-router的理解和使用\n    router-view/router-link/keep-alive\n    $router: 路由器对象, 包含一些操作路由的功能函数, 来实现编程式导航(跳转路由)\n    $route: 当前路由对象, 一些当前路由信息数据的容器, path/meta/query/params\n项目路由拆分\n底部导航组件: FooterGuide\n导航路由组件: Msite/Search/Order/Profile\n")])])]),t("h2",{attrs:{id:"_4-抽取组件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-抽取组件"}},[a._v("#")]),a._v(" 4. 抽取组件")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[a._v("头部组件: HeaderTop, 通过slot来实现组件通信标签结构\n商家列表组件: ShopList\n")])])]),t("h2",{attrs:{id:"_5-登陆路由组件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-登陆路由组件"}},[a._v("#")]),a._v(" 5. 登陆路由组件")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[a._v(" 静态组件\n FooterGuide的显示/隐藏: 通过路由的meta\n")])])]),t("h2",{attrs:{id:"_6-后台项目"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6-后台项目"}},[a._v("#")]),a._v(" 6. 后台项目")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[a._v("启动后台项目: 理解前后台分离\n测试后台接口: 使用postman\n修正接口文档\n")])])]),t("h2",{attrs:{id:"_7-前后台交互"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_7-前后台交互"}},[a._v("#")]),a._v(" 7. 前后台交互")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[a._v("ajax请求库: axios\najax请求函数封装: axios + promise\n接口请求函数封装: 每个后台接口\n")])])]),t("h1",{attrs:{id:"day02"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#day02"}},[a._v("#")]),a._v(" day02")]),a._v(" "),t("h2",{attrs:{id:"_1-异步数据"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-异步数据"}},[a._v("#")]),a._v(" 1. 异步数据")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[a._v("封装ajax: \n    promise+axios封装ajax请求的函数\n    封装每个接口对应的请求函数(能根据接口定义ajax请求函数)\n    解决ajax的跨越域问题: 配置代理, 对代理的理解\nvuex编码\n    创建所有相关的模块: store/index|state|mutations|actions|getters|mutation-types\n    设计state: 从后台获取的数据\n    实现actions: \n        定义异步action: async/await\n        流程:　发ajax获取数据, commit给mutation\n    实现mutations: 给状态赋值\n    实现index: 创建store对象\n    main.js: 配置store\n组件异步显示数据\n    在mounted()通过$store.dispatch('actionName')来异步获取后台数据到state中\n    mapState(['xxx'])读取state中数据到组件中\n    在模板中显示xxx的数据\n模板中显示数据的来源\n    data: 自身的数据(内部改变)\n    props: 外部传入的数据(外部改变)\n    computed: 根据data/props/别的compute/state/getters\n异步显示轮播图\n    通过vuex获取foodCategorys数组(发请求, 读取)\n    对数据进行整合计算(一维变为特定的二维数组)\n    使用Swiper显示轮播, 如何在界面更新之后创建Swiper对象?\n        1). 使用回调+$nextTick()\n        2). 使用watch+$nextTick()\t\n")])])]),t("h2",{attrs:{id:"_2-登陆-注册-界面相关效果"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-登陆-注册-界面相关效果"}},[a._v("#")]),a._v(" 2. 登陆/注册: 界面相关效果")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[a._v("a. 切换登陆方式\nb. 手机号合法检查\nc. 倒计时效果\nd. 切换显示或隐藏密码\ng. 前台验证提示\n")])])]),t("h2",{attrs:{id:"_3-前后台交互相关问题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-前后台交互相关问题"}},[a._v("#")]),a._v(" 3. 前后台交互相关问题")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[a._v("1). 如何查看你的应用是否发送某个ajax请求?  \n    浏览器的network\n2). 发ajax请求404\n    请求的路径的对\n    代理是否生效(配置和重启)\n    服务器应用是否运行\n3). 后台返回了数据, 但页面没有显示?\n    vuex中是否有\n    组件中是否读取\n")])])]),t("h1",{attrs:{id:"day03"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#day03"}},[a._v("#")]),a._v(" day03")]),a._v(" "),t("h2",{attrs:{id:"_1-完成登陆-注册功能"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-完成登陆-注册功能"}},[a._v("#")]),a._v(" 1. 完成登陆/注册功能")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[a._v("1). 2种方式\n   手机号/短信验证码登陆\n   用户名/密码/图片验证码登陆\n2). 登陆的基本流程\n   表单前台验证, 如果不通过, 提示\n   发送ajax请求, 得到返回的结果\n   根据结果的标识(code)来判断登陆请求是否成功\n       1: 不成功, 显示提示\n       0. 成功, 保存用户信息, 返回到上次路由\n3). vue自定义事件\n   绑定监听: @eventName=\"fn\"  function fn (data) {// 处理}\n   分发事件: this.$emit('eventName', data)\n4). 注意:\n   使用network查看请求(路径/参数/请求方式/响应数据)\n   使用vue的chrome插件查看vuex中的state和组件中的数据\n   使用debugger语句调试代码\n   实参类型与形参类型的匹配问题\n")])])]),t("h2",{attrs:{id:"_2-搭建商家整体界面"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-搭建商家整体界面"}},[a._v("#")]),a._v(" 2. 搭建商家整体界面")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[a._v("1). 拆分界面路由\n2). 路由的定义/配置|使用\n")])])]),t("h2",{attrs:{id:"_3-模拟-mock-数据-接口"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-模拟-mock-数据-接口"}},[a._v("#")]),a._v(" 3. 模拟(mock)数据/接口")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[a._v("1). 前后台分离的理解\n2). mockjs的理解和使用\n3). jons数据设计的理解\n")])])]),t("h2",{attrs:{id:"_4-shopheader组件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-shopheader组件"}},[a._v("#")]),a._v(" 4. ShopHeader组件")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[a._v("1). 异步显示数据效果的编码流程\n    ajax\n      ajax请求函数\n      接口请求函数\n    vuex\n      state\n      mutation-types\n      actions\n      mutations\n    组件\n      dispatch(): 异步获取后台数据到vuex的state\n      mapState(): 从vuex的state中读取对应的数据\n      模板中显示\n2). 初始显示异常\n    情况1: Cannot read property 'xxx' of undefined\"\n    原因: 初始值是空对象, 内部没有数据, 而模块中直接显示3层表达式\n    解决: 使用v-if指令\n    \n    情况2: Cannot read property 'xxx' of null\"\n \n3). vue transition动画\n")])])]),t("h1",{attrs:{id:"day04"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#day04"}},[a._v("#")]),a._v(" day04")]),a._v(" "),t("h2",{attrs:{id:"_1-shopgoods组件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-shopgoods组件"}},[a._v("#")]),a._v(" 1. ShopGoods组件")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[a._v("1). 动态展现列表数据\n2). 基本滑动:\n    使用better-scroll\n    理解其基本原理\n    创建BScroll对象的时机\n      watch + $nextTick()\n      callback + $nextTick\n3). 滑动右侧列表, 左侧同步更新\n    better-scroll禁用了原生的dom事件, 使用的是自定义事件\n    绑定监听: scroll/scrollEnd\n    滚动监听的类型: probeType\n    列表滑动的3种类型\n        手指触摸\n        惯性\n        编码\n    分析:\n        类名: current 标识当前分类\n        设计一个计算属性: currentIndex\n        根据哪些数据计算?\n          scrollY: 右侧滑动的Y轴坐标 (滑动过程时实时变化)\n          tops: 所有右侧分类li的top组成的数组  (列表第一次显示后就不再变化)\n    编码:\n        1). 在滑动过程中, 实时收集scrollY\n        2). 列表第一次显示后, 收集tops\n        3). 实现currentIndex的计算逻辑\n4). 点击左侧列表项, 右侧滑动到对应位置\n")])])]),t("h2",{attrs:{id:"_2-cartcontrol组件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-cartcontrol组件"}},[a._v("#")]),a._v(" 2. CartControl组件")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[a._v("1). 问题: 更新状态数据, 对应的界面不变化\n    原因: 一般方法给一个已有绑定的对象中添加一个新的属性, 这个属性没有数据绑定\n    解决: \n        Vue.set(obj, 'xxx', value)才有数据绑定\n        this.$set(obj, 'xxx', value)才有数据绑定\n")])])]),t("h2",{attrs:{id:"_3-shopcart组件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-shopcart组件"}},[a._v("#")]),a._v(" 3. ShopCart组件")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[a._v("1). 使用vuex管理购物项数据: cartFoods\n2). 解决几个功能性bug\n")])])]),t("h2",{attrs:{id:"_4-food组件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-food组件"}},[a._v("#")]),a._v(" 4. Food组件")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[a._v("1). 父子组件:\n    子组件调用父组件的方法: 通过props将方法传递给子组件\n    父组件调用子组件的方法: 通过ref找到子组件标签对象\n")])])]),t("h1",{attrs:{id:"day05"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#day05"}},[a._v("#")]),a._v(" day05")]),a._v(" "),t("h2",{attrs:{id:"_1-shopratings组件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-shopratings组件"}},[a._v("#")]),a._v(" 1. ShopRatings组件")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[a._v("1). 列表的过滤显示\n2). 自定义过滤器\n")])])]),t("h2",{attrs:{id:"_2-shopinfo组件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-shopinfo组件"}},[a._v("#")]),a._v(" 2. ShopInfo组件")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[a._v("1). 使用better-scroll实现两个方向的滑动\n1). 通过JS动态操作样式\n2). 解决当前路由刷新异常的bug\n")])])]),t("h2",{attrs:{id:"_3-search组件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-search组件"}},[a._v("#")]),a._v(" 3. Search组件")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[a._v("1). 根据关键字来异步搜索显示匹配的商家列表\n2). 如实实现没有搜索结果的提示显示\n")])])]),t("h2",{attrs:{id:"_4-项目优化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-项目优化"}},[a._v("#")]),a._v(" 4. 项目优化")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[a._v("1). 缓存路由组件对象\n2). 路由组件懒加载\n3). 图片司加载: vue-lazyload\n4). 分析打包文件并优化 ")])])])])}),[],!1,null,null,null);t.default=n.exports}}]);